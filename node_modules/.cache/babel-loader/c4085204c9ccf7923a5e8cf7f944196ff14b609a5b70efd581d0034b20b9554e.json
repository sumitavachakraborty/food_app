{"ast":null,"code":"import consumer from \"./consumer\";\ndocument.addEventListener('DOMContentLoaded', () => {\n  const notificationList = document.getElementById('notification-list');\n  const notificationCountElement = document.getElementById('notification-count');\n  console.log(notificationCountElement.textContent);\n  const resetCountButton = document.getElementById('reset-count-button');\n  consumer.subscriptions.create('NotificationsChannel', {\n    connected() {\n      console.log(\"NotificationsChannel connected\");\n    },\n    disconnected() {\n      // Called when the subscription has been terminated by the server\n    },\n    received(data) {\n      notificationList.removeAll();\n      console.log(data);\n      const newNotificationItem = document.createElement('a');\n      newNotificationItem.classList.add('dropdown-item');\n      newNotificationItem.href = '#';\n      newNotificationItem.textContent = data.data.message;\n      notificationList.appendChild(newNotificationItem);\n      increaseNotificationCount();\n    }\n  });\n  resetCountButton.addEventListener('click', () => {\n    resetNotificationCount();\n  });\n  function increaseNotificationCount() {\n    const currentCount = parseInt(notificationCountElement.innerText);\n    console.log(currentCount);\n    const newCount = currentCount + 1;\n    notificationCountElement.innerText = newCount.toString();\n    console.log(notificationCountElement.innerText);\n    notificationCountElement.setAttribute('data-count', newCount);\n  }\n  function resetNotificationCount() {\n    notificationCountElement.textContent = '0';\n    notificationCountElement.setAttribute('data-count', 0);\n  }\n});","map":{"version":3,"names":["consumer","document","addEventListener","notificationList","getElementById","notificationCountElement","console","log","textContent","resetCountButton","subscriptions","create","connected","disconnected","received","data","removeAll","newNotificationItem","createElement","classList","add","href","message","appendChild","increaseNotificationCount","resetNotificationCount","currentCount","parseInt","innerText","newCount","toString","setAttribute"],"sources":["/home/sumitava/rails_practise/zom/zoma/app/javascript/channels/notifications_channel.js"],"sourcesContent":["import consumer from \"./consumer\"\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const notificationList = document.getElementById('notification-list');\n  const notificationCountElement = document.getElementById('notification-count');\n  console.log(notificationCountElement.textContent);\n  const resetCountButton = document.getElementById('reset-count-button');\n\n  consumer.subscriptions.create('NotificationsChannel', {\n    connected() {\n      console.log(\"NotificationsChannel connected\");\n    },\n\n    disconnected() {\n      // Called when the subscription has been terminated by the server\n    },\n\n    received(data) {\n      notificationList.removeAll();\n      console.log(data);\n      const newNotificationItem = document.createElement('a');\n      newNotificationItem.classList.add('dropdown-item');\n      newNotificationItem.href = '#';\n      newNotificationItem.textContent = data.data.message;\n\n      notificationList.appendChild(newNotificationItem);\n\n      increaseNotificationCount();\n    }\n  });\n\n  resetCountButton.addEventListener('click', () => {\n    resetNotificationCount();\n  });\n\n  function increaseNotificationCount() {\n    const currentCount = parseInt(notificationCountElement.innerText);\n    console.log(currentCount);\n    const newCount = currentCount + 1;\n    notificationCountElement.innerText = newCount.toString();\n    console.log(notificationCountElement.innerText);\n    notificationCountElement.setAttribute('data-count', newCount);\n  }\n\n  function resetNotificationCount() {\n    notificationCountElement.textContent = '0';\n    notificationCountElement.setAttribute('data-count', 0);\n  }\n});\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,YAAY;AAEjCC,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;EAClD,MAAMC,gBAAgB,GAAGF,QAAQ,CAACG,cAAc,CAAC,mBAAmB,CAAC;EACrE,MAAMC,wBAAwB,GAAGJ,QAAQ,CAACG,cAAc,CAAC,oBAAoB,CAAC;EAC9EE,OAAO,CAACC,GAAG,CAACF,wBAAwB,CAACG,WAAW,CAAC;EACjD,MAAMC,gBAAgB,GAAGR,QAAQ,CAACG,cAAc,CAAC,oBAAoB,CAAC;EAEtEJ,QAAQ,CAACU,aAAa,CAACC,MAAM,CAAC,sBAAsB,EAAE;IACpDC,SAASA,CAAA,EAAG;MACVN,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAC/C,CAAC;IAEDM,YAAYA,CAAA,EAAG;MACb;IAAA,CACD;IAEDC,QAAQA,CAACC,IAAI,EAAE;MACbZ,gBAAgB,CAACa,SAAS,CAAC,CAAC;MAC5BV,OAAO,CAACC,GAAG,CAACQ,IAAI,CAAC;MACjB,MAAME,mBAAmB,GAAGhB,QAAQ,CAACiB,aAAa,CAAC,GAAG,CAAC;MACvDD,mBAAmB,CAACE,SAAS,CAACC,GAAG,CAAC,eAAe,CAAC;MAClDH,mBAAmB,CAACI,IAAI,GAAG,GAAG;MAC9BJ,mBAAmB,CAACT,WAAW,GAAGO,IAAI,CAACA,IAAI,CAACO,OAAO;MAEnDnB,gBAAgB,CAACoB,WAAW,CAACN,mBAAmB,CAAC;MAEjDO,yBAAyB,CAAC,CAAC;IAC7B;EACF,CAAC,CAAC;EAEFf,gBAAgB,CAACP,gBAAgB,CAAC,OAAO,EAAE,MAAM;IAC/CuB,sBAAsB,CAAC,CAAC;EAC1B,CAAC,CAAC;EAEF,SAASD,yBAAyBA,CAAA,EAAG;IACnC,MAAME,YAAY,GAAGC,QAAQ,CAACtB,wBAAwB,CAACuB,SAAS,CAAC;IACjEtB,OAAO,CAACC,GAAG,CAACmB,YAAY,CAAC;IACzB,MAAMG,QAAQ,GAAGH,YAAY,GAAG,CAAC;IACjCrB,wBAAwB,CAACuB,SAAS,GAAGC,QAAQ,CAACC,QAAQ,CAAC,CAAC;IACxDxB,OAAO,CAACC,GAAG,CAACF,wBAAwB,CAACuB,SAAS,CAAC;IAC/CvB,wBAAwB,CAAC0B,YAAY,CAAC,YAAY,EAAEF,QAAQ,CAAC;EAC/D;EAEA,SAASJ,sBAAsBA,CAAA,EAAG;IAChCpB,wBAAwB,CAACG,WAAW,GAAG,GAAG;IAC1CH,wBAAwB,CAAC0B,YAAY,CAAC,YAAY,EAAE,CAAC,CAAC;EACxD;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}