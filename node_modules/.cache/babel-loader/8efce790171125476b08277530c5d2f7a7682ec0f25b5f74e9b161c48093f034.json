{"ast":null,"code":"import consumer from \"./consumer\";\n\n// consumer.subscriptions.create({channel: 'NotificationsChannel', id: 3}, {\n//   connected() {\n//     console.log(\"NotificationsChannel connected\");\n//   },\n\n//   disconnected() {\n//     // Called when the subscription has been terminated by the server\n//   },\n\n//   received(data) {\n//     console.log(data);\n//     $('notification-count')\n//   }\n// });\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // const notificationList = document.getElementById('notification-list');\n  const notificationCountElement = document.getElementById('notification-count');\n  // const resetCountButton = document.getElementById('reset-count-button');\n\n  consumer.subscriptions.create({\n    channel: 'NotificationsChannel',\n    id: 3\n  }, {\n    connected() {\n      console.log(\"NotificationsChannel connected\");\n    },\n    disconnected() {\n      // Called when the subscription has been terminated by the server\n    },\n    received(data) {\n      // const newNotificationItem = document.createElement('a');\n      // newNotificationItem.classList.add('dropdown-item');\n      // newNotificationItem.href = '#';\n      // newNotificationItem.textContent = data.message;\n\n      // notificationList.appendChild(newNotificationItem);\n\n      const currentCount = parseInt(notificationCountElement.innerText);\n      console.log(currentCount);\n      const newCount = currentCount + 1;\n      notificationCountElement.innerText = newCount.toString();\n    }\n  });\n\n  // resetCountButton.addEventListener('click', () => {\n  //   resetNotificationCount();\n  // });\n\n  function increaseNotificationCount() {}\n\n  // function resetNotificationCount() {\n  //   notificationCountElement.innerText = '0';\n\n  //   // Update the attribute directly to reflect the reset value in the view\n  //   notificationCountElement.setAttribute('data-count', '0');\n  // }\n});","map":{"version":3,"names":["consumer","document","addEventListener","notificationCountElement","getElementById","subscriptions","create","channel","id","connected","console","log","disconnected","received","data","currentCount","parseInt","innerText","newCount","toString","increaseNotificationCount"],"sources":["/home/sumitava/rails_practise/zom/zoma/app/javascript/channels/notifications_channel.js"],"sourcesContent":["import consumer from \"./consumer\"\n\n\n  // consumer.subscriptions.create({channel: 'NotificationsChannel', id: 3}, {\n  //   connected() {\n  //     console.log(\"NotificationsChannel connected\");\n  //   },\n\n  //   disconnected() {\n  //     // Called when the subscription has been terminated by the server\n  //   },\n\n  //   received(data) {\n  //     console.log(data);\n  //     $('notification-count')\n  //   }\n  // });\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // const notificationList = document.getElementById('notification-list');\n  const notificationCountElement = document.getElementById('notification-count');\n  // const resetCountButton = document.getElementById('reset-count-button');\n\n  consumer.subscriptions.create({channel: 'NotificationsChannel', id: 3}, {\n    connected() {\n      console.log(\"NotificationsChannel connected\");\n    },\n\n    disconnected() {\n      // Called when the subscription has been terminated by the server\n    },\n\n    received(data) {\n      // const newNotificationItem = document.createElement('a');\n      // newNotificationItem.classList.add('dropdown-item');\n      // newNotificationItem.href = '#';\n      // newNotificationItem.textContent = data.message;\n\n      // notificationList.appendChild(newNotificationItem);\n\n      const currentCount = parseInt(notificationCountElement.innerText);\n      console.log(currentCount);\n      const newCount = currentCount + 1;\n      notificationCountElement.innerText = newCount.toString();\n    }\n  });\n\n  // resetCountButton.addEventListener('click', () => {\n  //   resetNotificationCount();\n  // });\n\n  function increaseNotificationCount() {\n    \n  }\n\n  // function resetNotificationCount() {\n  //   notificationCountElement.innerText = '0';\n\n  //   // Update the attribute directly to reflect the reset value in the view\n  //   notificationCountElement.setAttribute('data-count', '0');\n  // }\n});\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,YAAY;;AAG/B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGFC,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;EAClD;EACA,MAAMC,wBAAwB,GAAGF,QAAQ,CAACG,cAAc,CAAC,oBAAoB,CAAC;EAC9E;;EAEAJ,QAAQ,CAACK,aAAa,CAACC,MAAM,CAAC;IAACC,OAAO,EAAE,sBAAsB;IAAEC,EAAE,EAAE;EAAC,CAAC,EAAE;IACtEC,SAASA,CAAA,EAAG;MACVC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAC/C,CAAC;IAEDC,YAAYA,CAAA,EAAG;MACb;IAAA,CACD;IAEDC,QAAQA,CAACC,IAAI,EAAE;MACb;MACA;MACA;MACA;;MAEA;;MAEA,MAAMC,YAAY,GAAGC,QAAQ,CAACb,wBAAwB,CAACc,SAAS,CAAC;MACjEP,OAAO,CAACC,GAAG,CAACI,YAAY,CAAC;MACzB,MAAMG,QAAQ,GAAGH,YAAY,GAAG,CAAC;MACjCZ,wBAAwB,CAACc,SAAS,GAAGC,QAAQ,CAACC,QAAQ,CAAC,CAAC;IAC1D;EACF,CAAC,CAAC;;EAEF;EACA;EACA;;EAEA,SAASC,yBAAyBA,CAAA,EAAG,CAErC;;EAEA;EACA;;EAEA;EACA;EACA;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}