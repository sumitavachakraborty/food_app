{"ast":null,"code":"import consumer from \"./consumer\";\n\n//   // consumer.subscriptions.create({channel: 'NotificationsChannel', id: 3}, {\n//   //   connected() {\n//   //     console.log(\"NotificationsChannel connected\");\n//   //   },\n\n//   //   disconnected() {\n//   //     // Called when the subscription has been terminated by the server\n//   //   },\n\n//   //   received(data) {\n//   //     console.log(data);\n//   //     $('notification-count')\n//   //   }\n//   // });\n\n// document.addEventListener('DOMContentLoaded', () => {\n//   // const notificationList = document.getElementById('notification-list');\n//   const notificationCountElement = document.getElementById('notification-count');\n//   // const resetCountButton = document.getElementById('reset-count-button');\n\n//   consumer.subscriptions.create({channel: 'NotificationsChannel', id: 3}, {\n//     connected() {\n//       console.log(\"NotificationsChannel connected\");\n//     },\n\n//     disconnected() {\n//       // Called when the subscription has been terminated by the server\n//     },\n\n//     received(data) {\n//       // const newNotificationItem = document.createElement('a');\n//       // newNotificationItem.classList.add('dropdown-item');\n//       // newNotificationItem.href = '#';\n//       // newNotificationItem.textContent = data.message;\n\n//       // notificationList.appendChild(newNotificationItem);\n\n//       const currentCount = parseInt(notificationCountElement.innerText);\n//       console.log(currentCount);\n//       const newCount = currentCount + 1;\n//       notificationCountElement.innerText = newCount.toString();\n//     }\n//   });\n\n//   // resetCountButton.addEventListener('click', () => {\n//   //   resetNotificationCount();\n//   // });\n\n//   // function resetNotificationCount() {\n//   //   notificationCountElement.innerText = '0';\n\n//   //   // Update the attribute directly to reflect the reset value in the view\n//   //   notificationCountElement.setAttribute('data-count', '0');\n//   // }\n// });","map":{"version":3,"names":["consumer"],"sources":["/home/sumitava/rails_practise/zom/zoma/app/javascript/channels/notifications_channel.js"],"sourcesContent":["import consumer from \"./consumer\"\n\n\n//   // consumer.subscriptions.create({channel: 'NotificationsChannel', id: 3}, {\n//   //   connected() {\n//   //     console.log(\"NotificationsChannel connected\");\n//   //   },\n\n//   //   disconnected() {\n//   //     // Called when the subscription has been terminated by the server\n//   //   },\n\n//   //   received(data) {\n//   //     console.log(data);\n//   //     $('notification-count')\n//   //   }\n//   // });\n\n\n// document.addEventListener('DOMContentLoaded', () => {\n//   // const notificationList = document.getElementById('notification-list');\n//   const notificationCountElement = document.getElementById('notification-count');\n//   // const resetCountButton = document.getElementById('reset-count-button');\n\n//   consumer.subscriptions.create({channel: 'NotificationsChannel', id: 3}, {\n//     connected() {\n//       console.log(\"NotificationsChannel connected\");\n//     },\n\n//     disconnected() {\n//       // Called when the subscription has been terminated by the server\n//     },\n\n//     received(data) {\n//       // const newNotificationItem = document.createElement('a');\n//       // newNotificationItem.classList.add('dropdown-item');\n//       // newNotificationItem.href = '#';\n//       // newNotificationItem.textContent = data.message;\n\n//       // notificationList.appendChild(newNotificationItem);\n\n//       const currentCount = parseInt(notificationCountElement.innerText);\n//       console.log(currentCount);\n//       const newCount = currentCount + 1;\n//       notificationCountElement.innerText = newCount.toString();\n//     }\n//   });\n\n//   // resetCountButton.addEventListener('click', () => {\n//   //   resetNotificationCount();\n//   // });\n\n//   // function resetNotificationCount() {\n//   //   notificationCountElement.innerText = '0';\n\n//   //   // Update the attribute directly to reflect the reset value in the view\n//   //   notificationCountElement.setAttribute('data-count', '0');\n//   // }\n// });\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,YAAY;;AAGjC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}