{"ast":null,"code":"import consumer from \"./consumer\";\nconsumer.subscriptions.create('NotificationsChannel', {\n  connected() {\n    console.log(\"NotificationsChannel connected\");\n  },\n  disconnected() {\n    // Called when the subscription has been terminated by the server\n  },\n  received(data) {\n    console.log(data);\n    const newNotificationItem = document.createElement('a');\n    newNotificationItem.classList.add('dropdown-item');\n    newNotificationItem.href = '#';\n    newNotificationItem.textContent = data.data.message;\n    notificationList.appendChild(newNotificationItem);\n    increaseNotificationCount();\n  }\n});\nfunction increaseNotificationCount() {\n  const notificationCountElement = document.getElementById('notification-count');\n  const currentCount = parseInt(notificationCountElement.innerText);\n  console.log(currentCount);\n  const newCount = currentCount + 1;\n  notificationCountElement.innerText = newCount.toString();\n  console.log(notificationCountElement.innerText);\n  notificationCountElement.setAttribute('data-count', newCount);\n}","map":{"version":3,"names":["consumer","subscriptions","create","connected","console","log","disconnected","received","data","newNotificationItem","document","createElement","classList","add","href","textContent","message","notificationList","appendChild","increaseNotificationCount","notificationCountElement","getElementById","currentCount","parseInt","innerText","newCount","toString","setAttribute"],"sources":["/home/sumitava/rails_practise/zom/zoma/app/javascript/channels/notifications_channel.js"],"sourcesContent":["import consumer from \"./consumer\"\n\n\n  consumer.subscriptions.create('NotificationsChannel', {\n    connected() {\n      console.log(\"NotificationsChannel connected\");\n    },\n\n    disconnected() {\n      // Called when the subscription has been terminated by the server\n    },\n\n    received(data) {\n      console.log(data);\n      const newNotificationItem = document.createElement('a');\n      newNotificationItem.classList.add('dropdown-item');\n      newNotificationItem.href = '#';\n      newNotificationItem.textContent = data.data.message;\n\n      notificationList.appendChild(newNotificationItem);\n\n      increaseNotificationCount();\n    }\n  });\n\n  function increaseNotificationCount() {\n    const notificationCountElement = document.getElementById('notification-count');\n    const currentCount = parseInt(notificationCountElement.innerText);\n    console.log(currentCount);\n    const newCount = currentCount + 1;\n    notificationCountElement.innerText = newCount.toString();\n    console.log(notificationCountElement.innerText);\n    notificationCountElement.setAttribute('data-count', newCount);\n  }\n\n\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,YAAY;AAG/BA,QAAQ,CAACC,aAAa,CAACC,MAAM,CAAC,sBAAsB,EAAE;EACpDC,SAASA,CAAA,EAAG;IACVC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EAC/C,CAAC;EAEDC,YAAYA,CAAA,EAAG;IACb;EAAA,CACD;EAEDC,QAAQA,CAACC,IAAI,EAAE;IACbJ,OAAO,CAACC,GAAG,CAACG,IAAI,CAAC;IACjB,MAAMC,mBAAmB,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACvDF,mBAAmB,CAACG,SAAS,CAACC,GAAG,CAAC,eAAe,CAAC;IAClDJ,mBAAmB,CAACK,IAAI,GAAG,GAAG;IAC9BL,mBAAmB,CAACM,WAAW,GAAGP,IAAI,CAACA,IAAI,CAACQ,OAAO;IAEnDC,gBAAgB,CAACC,WAAW,CAACT,mBAAmB,CAAC;IAEjDU,yBAAyB,CAAC,CAAC;EAC7B;AACF,CAAC,CAAC;AAEF,SAASA,yBAAyBA,CAAA,EAAG;EACnC,MAAMC,wBAAwB,GAAGV,QAAQ,CAACW,cAAc,CAAC,oBAAoB,CAAC;EAC9E,MAAMC,YAAY,GAAGC,QAAQ,CAACH,wBAAwB,CAACI,SAAS,CAAC;EACjEpB,OAAO,CAACC,GAAG,CAACiB,YAAY,CAAC;EACzB,MAAMG,QAAQ,GAAGH,YAAY,GAAG,CAAC;EACjCF,wBAAwB,CAACI,SAAS,GAAGC,QAAQ,CAACC,QAAQ,CAAC,CAAC;EACxDtB,OAAO,CAACC,GAAG,CAACe,wBAAwB,CAACI,SAAS,CAAC;EAC/CJ,wBAAwB,CAACO,YAAY,CAAC,YAAY,EAAEF,QAAQ,CAAC;AAC/D"},"metadata":{},"sourceType":"module","externalDependencies":[]}